name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on release tags like v1.0.0

permissions:
  contents: write
  id-token: write

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Create a Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## What's New
            - Add your release notes here.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    name: Build on Windows
    runs-on: windows-latest
    needs: create-release  # Make sure create-release runs before this job

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up dependencies for Windows
      - name: Set up dependencies
        shell: cmd
        run: |
          choco install make  msys2 zip -y

      - name: Set up mingw
        shell: cmd
        run: |
          C:\\tools\\msys64\\usr\bin\\bash.exe --login -c "pacman -Syu --noconfirm"
          C:\\tools\\msys64\\usr\\bin\\bash.exe --login -c "pacman -S mingw-w64-x86_64-gcc mingw-w64-x86_64-crt-git --noconfirm"
          C:\\tools\\msys64\\usr\\bin\\bash.exe --login -c "pacman -S mingw-w64-i686-gcc mingw-w64-i686-crt-git --noconfirm"
          tree C:\\tools\\msys64 /f

      # Run make all
      - name: Build project (x64)
        shell: bash
        run: |
          make clean CC=x86_64-w64-mingw32-gcc all

      # Compress lib, bin, and include into a zip file
      - name: Package files (x64)
        shell: cmd
        run: |
          mkdir package
          cp -r lib bin include package
          cd package
          zip -r ../cMDA_win64.zip *
          cd ..
          rmdir /s /q package

      # Run make all
      - name: Build project (x32)
        shell: bash
        run: |
          C:\\tools\\msys64\\mingw32\\bin\\i686-w64-mingw32-gcc -v
          make clean CC=C:\\tools\\msys64\\mingw32\\bin\\i686-w64-mingw32-gcc all

      # Compress lib, bin, and include into a zip file
      - name: Package files (x32)
        shell: cmd
        run: |
          mkdir package
          cp -r lib bin include package
          cd package
          zip -r ../cMDA_win32.zip *
          cd ..
          rmdir /s /q package

      # Upload the Windows ZIP file for release
      - name: Upload Windows x64 asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./cMDA_win64.zip
          asset_name: cMDA_win64.zip
          asset_content_type: application/zip

      # Upload the Windows ZIP file for release
      - name: Upload Windows x64 asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./cMDA_win32.zip
          asset_name: cMDA_win32.zip
          asset_content_type: application/zip

  build-linux:
    name: Build on Linux
    runs-on: ubuntu-latest
    needs: create-release  # Make sure create-release runs before this job

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up dependencies for Linux
      - name: Install dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y build-essential tar libc6:i386 libc6-dev:i386 gcc-multilib g++-multilib

      # Run make all
      - name: Build project (x64)
        run: |
          make clean all arch=64

      # Compress lib, bin, and include into a tar file
      - name: Package files (x64)
        run: |
          mkdir -p package
          cp -r lib bin include package
          tar -czf cMDA_linux64.tar.gz -C package .
          rm -rf package

        # Run make all
      - name: Build project (x32)
        run: |
          make clean all arch=32

      # Compress lib, bin, and include into a tar file
      - name: Package files (x32)
        run: |
          mkdir -p package
          cp -r lib bin include package
          tar -czf cMDA_linux32.tar.gz -C package .
          rm -rf package

      # Upload the Linux TAR file for release
      - name: Upload Linux x64 asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./cMDA_linux64.tar.gz
          asset_name: cMDA_linux64.tar.gz
          asset_content_type: application/gzip


      # Upload the Linux TAR file for release
      - name: Upload Linux x32 asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./cMDA_linux32.tar.gz
          asset_name: cMDA_linux32.tar.gz
          asset_content_type: application/gzip
