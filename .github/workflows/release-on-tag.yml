name: Release on Tag

on:
  push:
    tags:
      - "v*" # Trigger on tags starting with 'v'

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            env_name: cMDA_linux64
            compress_cmd: "tar -czf"
            compress_ext: ".tar.gz"
          - os: windows-latest
            env_name: cMDA_win64
            compress_cmd: "Compress-Archive -Path"
            compress_ext: ".zip"

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set Up Build Environment
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y make gcc

    - name: Set Up Build Environment (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install make
        choco install mingw

    - name: Build Project
      run: make all

    - name: Prepare Artifact for Release
      run: |
        mkdir ${{ matrix.env_name }}
        cp -r lib include bin ${{ matrix.env_name }}
        ${{ matrix.compress_cmd }} ${{ matrix.env_name }} ${{ matrix.env_name }}${{ matrix.compress_ext }}
      shell: bash

    - name: Upload Release Asset
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.env_name }}
        path: ${{ matrix.env_name }}${{ matrix.compress_ext }}

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          This release includes:
          - Prebuilt binaries for Windows and Linux.
          - Library and headers for integration.
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ${{ matrix.env_name }}${{ matrix.compress_ext }}
        asset_name: ${{ matrix.env_name }}${{ matrix.compress_ext }}
        asset_content_type: application/octet-stream
